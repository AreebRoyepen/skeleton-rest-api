package com.example.skeleton.services;

import com.example.skeleton.api.ResponseMessageObject;
import com.example.skeleton.dto.ReportServiceDTO;
import com.example.skeleton.enums.ResponseStatus;
import com.example.skeleton.exception.ValidationException;
import com.example.skeleton.models.Member;
import com.example.skeleton.reports.ReportData;
import com.example.skeleton.reports.ReportGenerator;
import com.example.skeleton.repositories.MemberRepo;
import lombok.extern.log4j.Log4j2;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.util.Calendar;
import java.util.List;
import java.util.NoSuchElementException;

@Service
@Log4j2
public class ReportService {

    ReportData reportData;
    MemberRepo memberRepo;
    ReportGenerator reportGenerator;
    EmailServiceImpl emailService;

    final String emailBody = "This is an automatic email generated by the GIS Burial Scheme.";

    public ReportService(ReportData reportData, MemberRepo memberRepo, ReportGenerator reportGenerator, EmailServiceImpl emailService) {
        this.reportData = reportData;
        this.memberRepo = memberRepo;
        this.reportGenerator = reportGenerator;
        this.emailService = emailService;
    }

    public ReportServiceDTO memberDetails() throws ValidationException {

        try{
            List<Member> members = memberRepo.findAll();

            // To convert bytes to an InputStream, use a ByteArrayInputStream
            ByteArrayInputStream bis = new ByteArrayInputStream(reportGenerator.generateMemberCSV(members));

            HttpHeaders headers = getHttpHeaders("member info","csv");

            return ReportServiceDTO.builder().httpHeaders(headers).contentType(new MediaType("text", "csv"))
                    .inputStream(bis).build();

        } catch (Exception e){
            System.out.println(e.getMessage());
            e.printStackTrace();
            log.error(e.getMessage());
            throw new ValidationException(e.getMessage());
        }

    }

    public ResponseMessageObject emailMemberDetails(String email) throws ValidationException {
        try{
            List<Member> members = memberRepo.findAll();

            // To convert bytes to an InputStream, use a ByteArrayInputStream
            ByteArrayInputStream bis = new ByteArrayInputStream(reportGenerator.generateMemberCSV(members));

            emailService.sendEmailWithAttachment("Member Details.csv"
                    ,email,emailBody,"GIS Burial Scheme Member Details",bis, "text/csv");

            return ResponseMessageObject.builder().message(ResponseStatus.SUCCESS.name()).build();

        } catch (Exception e){
            System.out.println(e.getMessage());
            e.printStackTrace();
            log.error(e.getMessage());
            throw new ValidationException(e.getMessage());
        }
    }

    private HttpHeaders getHttpHeaders (String reportName, String type){

        Calendar calender = Calendar.getInstance();
        HttpHeaders headers = new HttpHeaders();


        if(type.equalsIgnoreCase("pdf")){

            String filename = reportName + " " + calender.getTime().toString()+".pdf";

            headers.add("Content-Disposition", "inline; "+filename);
            headers.add("Content-Type:", "application/pdf");

        }else if(type.equalsIgnoreCase("csv")){

            String filename = reportName + " " + calender.getTime().toString()+".csv";

            headers.add("Content-Disposition", "inline; "+filename);
            headers.add("Accept:", "text/csv");


        }

        return headers;
    }
}
